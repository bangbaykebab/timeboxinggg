<!doctype html>
<html lang="id">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover" />
  <meta name="theme-color" content="#007aff" />
  <meta name="apple-mobile-web-app-capable" content="yes" />
  <meta name="apple-mobile-web-app-status-bar-style" content="default" />
  <title>Time Boxing Checklist</title>
  <link rel="manifest" href="/manifest.json" />
  <style>
    /* ---------- Basic iOS-like design ---------- */
    :root{
      --bg:#f7f8fb;
      --card:#ffffff;
      --accent:#007aff;
      --muted:#8b8f95;
      --radius:14px;
      --gap:14px;
      font-family: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial;
    }
    html,body{height:100%;margin:0;background:var(--bg);color:#111}
    .app{max-width:430px;margin:0 auto;min-height:100vh;display:flex;flex-direction:column}
    header{padding:18px 18px 8px}
    .safe-area{padding-bottom:72px} /* leave space for bottom nav */

    /* Card */
    .card{background:var(--card);border-radius:var(--radius);box-shadow:0 6px 18px rgba(16,24,40,0.06);padding:12px;margin:12px}

    /* Checklist list */
    ul.checklist{list-style:none;padding:0;margin:0}
    li.item{display:flex;align-items:center;gap:12px;padding:12px;border-radius:12px;margin-bottom:10px}
    .item .left{display:flex;flex-direction:column;flex:1}
    .item .title{font-weight:600;margin-bottom:6px}
    .item .sub{font-size:13px;color:var(--muted)}
    .checkbox{width:46px;height:46px;border-radius:10px;border:1px solid #e6e6ea;display:flex;align-items:center;justify-content:center;flex-shrink:0}
    .checkbox input{width:22px;height:22px}

    /* Duration input */
    .duration{width:90px;display:flex;align-items:center;gap:8px}
    .duration input{width:56px;padding:6px;border-radius:10px;border:1px solid #e9e9ef;text-align:center}

    /* Controls */
    .controls{display:flex;gap:10px;padding:12px}
    button.btn{flex:1;padding:12px;border-radius:12px;border:0;background:var(--accent);color:white;font-weight:600}
    button.ghost{background:transparent;border:1px solid #e6e6ea;color:#111}

    /* Progress */
    .progress-wrap{height:10px;background:#eef2ff;border-radius:999px;overflow:hidden;margin:12px}
    .progress{height:100%;width:0;background:linear-gradient(90deg,var(--accent),#5ab1ff);transition:width 0.4s ease}

    /* Timer display */
    .timer{font-size:18px;font-weight:700;text-align:center;padding:6px}

    /* Journal */
    form.journal{display:flex;flex-direction:column;gap:10px}
    textarea{min-height:90px;padding:12px;border-radius:12px;border:1px solid #eee;resize:vertical;font-size:15px}
    .cards-list{display:flex;flex-direction:column;gap:10px;margin-top:10px}
    .note-card{padding:12px;border-radius:12px;background:var(--card);box-shadow:0 4px 12px rgba(16,24,40,0.04)}
    .note-card small{color:var(--muted)}

    /* Bottom nav */
    nav.bottom-nav{position:fixed;left:0;right:0;bottom:0;display:flex;justify-content:center;padding:10px 0;background:transparent}
    .nav-inner{width:100%;max-width:430px;padding:8px 18px;background:rgba(255,255,255,0.9);backdrop-filter:blur(6px);border-radius:18px;margin:0 12px;display:flex;gap:8px;box-shadow:0 10px 30px rgba(8,10,20,0.08)}
    .tab{flex:1;padding:8px;border-radius:12px;display:flex;flex-direction:column;align-items:center;justify-content:center;gap:6px;font-size:12px;color:var(--muted)}
    .tab.active{background:linear-gradient(180deg,rgba(0,122,255,0.12),rgba(0,122,255,0.06));color:var(--accent)}

    /* Responsive small adjustments */
    @media (max-width:420px){.app{padding-bottom:12px}.card{margin:10px}}
  </style>
</head>
<body>
  <div class="app">
    <header>
      <h1 style="margin:0;font-size:20px">Time Boxing Checklist</h1>
      <p style="margin:6px 0 0;color:var(--muted)">Simple PWA, iOS look & feel</p>
    </header>

    <main class="safe-area" id="main">
      <!-- CHECKLIST PAGE -->
      <section id="page-checklist">
        <div class="card">
          <div style="display:flex;justify-content:space-between;align-items:center">
            <div>
              <small class="sub">Task timer</small>
              <div class="timer" id="global-timer">00:00</div>
            </div>
            <div style="text-align:right">
              <small class="sub">Progress</small>
              <div class="progress-wrap"><div class="progress" id="progress"></div></div>
            </div>
          </div>
        </div>

        <div class="card">
          <ul class="checklist" id="checklist"></ul>

          <div class="controls">
            <button id="startBtn" class="btn">Mulai</button>
            <button id="pauseBtn" class="ghost">Jeda</button>
            <button id="resetBtn" class="ghost">Batal</button>
          </div>
        </div>
      </section>

      <!-- JOURNAL PAGE -->
      <section id="page-journal" style="display:none;padding:12px">
        <div class="card">
          <form class="journal" id="journalForm">
            <label><strong>Hal-hal yang perlu dicatat hari ini</strong></label>
            <textarea id="todayNotes" placeholder="Tulis catatan..."></textarea>
            <label><strong>Apa yang akan dilakukan besok</strong></label>
            <textarea id="tomorrowNotes" placeholder="Rencana besok..."></textarea>
            <div style="display:flex;gap:8px">
              <button id="saveJournal" type="button" class="btn">Simpan</button>
              <button id="clearJournal" type="button" class="ghost">Hapus</button>
            </div>
          </form>
        </div>

        <div class="cards-list" id="savedNotes"></div>
      </section>
    </main>

    <!-- Bottom nav -->
    <nav class="bottom-nav">
      <div class="nav-inner">
        <div class="tab active" id="tab-checklist" data-target="page-checklist">
          <div style="font-size:18px">‚úÖ</div>
          <div>Checklist</div>
        </div>
        <div class="tab" id="tab-journal" data-target="page-journal">
          <div style="font-size:18px">üìù</div>
          <div>Jurnal</div>
        </div>
      </div>
    </nav>

  </div>

  <script>
    /* ---------- App Data & Defaults ---------- */
    const DEFAULT_ITEMS = [
      {id:'subuh', title:'sholat subuh tepat waktu', duration:10},
      {id:'duha', title:'sholat duha', duration:10},
      {id:'istighfar', title:'istighfar 500x', duration:10},
      {id:'pushup', title:'push up 50x', duration:10},
      {id:'podcast', title:'mendengarkan podcast min 1 video', duration:10},
      {id:'hafal', title:'menghafal 5 kalimat bahasa inggris', duration:10}
    ];

    // localStorage keys
    const LS_CHECK_KEY = 'tb_checklist_v1';
    const LS_JOURNAL_KEY = 'tb_journal_v1';

    /* ---------- Helper: format time mm:ss ---------- */
    function fmt(seconds){
      const m = Math.floor(seconds/60).toString().padStart(2,'0');
      const s = (seconds%60).toString().padStart(2,'0');
      return m+':'+s;
    }

    /* ---------- Render checklist ---------- */
    const checklistEl = document.getElementById('checklist');
    let state = {items:[], currentIndex:0, running:false, remaining:0, intervalId:null};

    function loadState(){
      const raw = localStorage.getItem(LS_CHECK_KEY);
      if(raw){
        state = JSON.parse(raw);
        // ensure backward-compatibility
        if(!state.items) state.items = DEFAULT_ITEMS.map(i=>({...i,checked:false}));
      } else {
        state.items = DEFAULT_ITEMS.map(i=>({...i,checked:false}));
      }
    }

    function saveState(){
      localStorage.setItem(LS_CHECK_KEY, JSON.stringify(state));
    }

    function renderList(){
      checklistEl.innerHTML='';
      state.items.forEach((it, idx)=>{
        const li = document.createElement('li'); li.className='item card';
        li.innerHTML = `
          <div class="checkbox"><input type="checkbox" data-idx="${idx}" ${it.checked? 'checked':''}></div>
          <div class="left">
            <div class="title">${it.title}</div>
            <div class="sub">Durasi: <span class="dur-val">${it.duration}</span> menit</div>
          </div>
          <div class="duration">
            <input type="number" min="1" data-idx="${idx}" class="dur-input" value="${it.duration}"> menit
          </div>`;
        checklistEl.appendChild(li);
      });
      attachListEvents();
      updateProgressUI();
    }

    function attachListEvents(){
      // checkbox toggle
      checklistEl.querySelectorAll('input[type=checkbox]').forEach(cb=>{
        cb.addEventListener('change', e=>{
          const i = +e.target.dataset.idx;
          state.items[i].checked = e.target.checked;
          saveState();
          updateProgressUI();
        });
      });
      // duration change
      checklistEl.querySelectorAll('.dur-input').forEach(inp=>{
        inp.addEventListener('change', e=>{
          const i = +e.target.dataset.idx;
          let v = parseInt(e.target.value)||1;
          state.items[i].duration = Math.max(1,v);
          saveState();
          renderList();
        });
      });
    }

    /* ---------- Timer control logic ---------- */
    const startBtn = document.getElementById('startBtn');
    const pauseBtn = document.getElementById('pauseBtn');
    const resetBtn = document.getElementById('resetBtn');
    const timerDisplay = document.getElementById('global-timer');
    const progressBar = document.getElementById('progress');

    function startFrom(index){
      // find next unchecked from index
      let i = index;
      while(i < state.items.length && state.items[i].checked) i++;
      if(i>=state.items.length){stopTimer();return}
      state.currentIndex = i;
      state.remaining = state.items[i].duration * 60; // seconds
      state.running = true;
      saveState();
      stepTick();
      state.intervalId = setInterval(stepTick,1000);
    }

    function stepTick(){
      if(!state.running) return;
      if(state.remaining<=0){
        // mark current as done and auto move to next
        state.items[state.currentIndex].checked = true;
        saveState();
        renderList();
        // small delay before start next
        clearInterval(state.intervalId);
        state.intervalId = null;
        state.running = false;
        // start next after 400ms
        setTimeout(()=>startFrom(state.currentIndex+1),400);
        return;
      }
      state.remaining--;
      timerDisplay.textContent = fmt(state.remaining);
      updateProgressUI();
    }

    function updateProgressUI(){
      const total = state.items.reduce((s,it)=>s + (it.duration||0)*60,0);
      const doneSeconds = state.items.reduce((s,it)=>s + ((it.checked? (it.duration||0)*60 : 0)),0) + (state.running? (state.items[state.currentIndex]?.duration*60 - state.remaining || 0):0);
      const pct = total>0? Math.min(100, Math.round((doneSeconds/total)*100)):0;
      progressBar.style.width = pct+'%';

      // update timer if not running
      if(!state.running){
        // show next item's full duration or 00:00 if all done
        const next = state.items.find(it=>!it.checked);
        timerDisplay.textContent = next? fmt((next.duration||0)*60) : '00:00';
      }
    }

    function stopTimer(){
      if(state.intervalId) clearInterval(state.intervalId);
      state.intervalId = null;
      state.running = false;
      state.remaining = 0;
      saveState();
      renderList();
      updateProgressUI();
    }

    // Buttons
    startBtn.addEventListener('click', ()=>{
      if(state.running) return; // already running
      // start at current index or first unchecked
      const idx = state.currentIndex || 0;
      startFrom(idx);
    });
    pauseBtn.addEventListener('click', ()=>{
      if(state.running){
        clearInterval(state.intervalId); state.intervalId=null; state.running=false; saveState();
      } else {
        // resume
        if(state.remaining>0){ state.running=true; state.intervalId=setInterval(stepTick,1000); }
      }
    });
    resetBtn.addEventListener('click', ()=>{
      // cancel timer and uncheck all
      stopTimer();
      state.items.forEach(it=>it.checked=false);
      state.currentIndex = 0;
      saveState();
      renderList();
    });

    /* ---------- Journal logic ---------- */
    const todayEl = document.getElementById('todayNotes');
    const tomorrowEl = document.getElementById('tomorrowNotes');
    const saveJournalBtn = document.getElementById('saveJournal');
    const clearJournalBtn = document.getElementById('clearJournal');
    const savedNotesEl = document.getElementById('savedNotes');

    function loadJournal(){
      const raw = localStorage.getItem(LS_JOURNAL_KEY);
      if(raw) return JSON.parse(raw);
      return [];
    }
    function saveJournal(){
      const payload = {today:todayEl.value, tomorrow:tomorrowEl.value, ts: Date.now()};
      const arr = loadJournal();
      arr.unshift(payload);
      localStorage.setItem(LS_JOURNAL_KEY, JSON.stringify(arr.slice(0,50))); // keep up to 50
      renderJournalList();
    }
    function renderJournalList(){
      const arr = loadJournal();
      savedNotesEl.innerHTML='';
      arr.forEach((n, idx)=>{
        const card = document.createElement('div'); card.className='note-card';
        card.innerHTML = `<div><small>${new Date(n.ts).toLocaleString()}</small></div>
                          <div style="margin-top:8px"><strong>Hari ini</strong><div>${escapeHtml(n.today)}</div></div>
                          <div style="margin-top:8px"><strong>Besok</strong><div>${escapeHtml(n.tomorrow)}</div></div>
                          <div style="display:flex;gap:8px;margin-top:8px"><button data-idx="${idx}" class="btn edit">Edit</button><button data-idx="${idx}" class="ghost del">Hapus</button></div>`;
        savedNotesEl.appendChild(card);
      });
      // attach handlers
      savedNotesEl.querySelectorAll('.del').forEach(b=>b.addEventListener('click', e=>{
        const i = +e.target.dataset.idx; const arr = loadJournal(); arr.splice(i,1); localStorage.setItem(LS_JOURNAL_KEY, JSON.stringify(arr)); renderJournalList();
      }));
      savedNotesEl.querySelectorAll('.edit').forEach(b=>b.addEventListener('click', e=>{
        const i = +e.target.dataset.idx; const arr = loadJournal(); const item = arr[i];
        // load into form and remove from list (will be saved as new on Save)
        todayEl.value = item.today; tomorrowEl.value = item.tomorrow; arr.splice(i,1); localStorage.setItem(LS_JOURNAL_KEY, JSON.stringify(arr)); renderJournalList();
      }));
    }

    saveJournalBtn.addEventListener('click', ()=>{ saveJournal(); todayEl.value=''; tomorrowEl.value=''; });
    clearJournalBtn.addEventListener('click', ()=>{ todayEl.value=''; tomorrowEl.value=''; });

    function escapeHtml(s){ if(!s) return ''; return s.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/\n/g,'<br>'); }

    /* ---------- Navigation (bottom tabs) ---------- */
    document.querySelectorAll('.tab').forEach(t=>{
      t.addEventListener('click', ()=>{
        document.querySelectorAll('.tab').forEach(x=>x.classList.remove('active'));
        t.classList.add('active');
        document.querySelectorAll('main > section').forEach(s=>s.style.display='none');
        document.getElementById(t.dataset.target).style.display='block';
      });
    });

    /* ---------- Init ---------- */
    loadState(); renderList(); renderJournalList();

    // register service worker for PWA
    if('serviceWorker' in navigator){
      navigator.serviceWorker.register('/sw.js').catch(e=>console.warn('SW reg failed',e));
    }

    // expose for console debugging
    window._TB = {state, saveState, loadState, renderList};

    // save periodically
    setInterval(()=>saveState(), 5000);

  </script>
</body>
</html>
